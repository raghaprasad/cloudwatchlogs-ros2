#!/usr/bin/env python

# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://aws.amazon.com/apache2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.


import boto3
import launch
import os
import rclpy
import sys
import time
import unittest
import yaml


from ament_index_python.packages import get_package_share_directory
from launch_ros.actions import Node
from rcl_interfaces.msg import Log


def generate_test_description(ready_fn):
    integ_test_config = os.path.join(
        get_package_share_directory('cloudwatch_logger'),
        'config',
        'integ_test_configuration.yaml'
    )
    with open(integ_test_config, 'r') as f:
        config_text = f.read()
    config_yaml = yaml.safe_load(config_text)
    ros_parameters = config_yaml['cloudwatch_logger']['ros__parameters']
    default_log_group_name = ros_parameters['log_group_name']
    default_aws_region = ros_parameters['aws_client_configuration']['region']

    parameters = [launch.substitutions.LaunchConfiguration('config_file')]
    parameters.append({
        'log_group_name':
            launch.substitutions.LaunchConfiguration('log_group_name')
    })
    parameters.append({
        'aws_client_configuration': {
            'region': launch.substitutions.LaunchConfiguration('aws_region')
        }
    })

    proc_env = os.environ.copy()
    local_stack_process = launch.actions.ExecuteProcess(
        cmd=[
            sys.executable,
            '/home/ubuntu/.local/bin/localstack',
            'start',
            '--host',
        ],
        env=proc_env,
        output='screen'
    )

    return (launch.LaunchDescription([
        local_stack_process,
        launch.actions.DeclareLaunchArgument(
            'node_name',
            default_value='cloudwatch_logger',
        ),
        launch.actions.DeclareLaunchArgument(
            'config_file',
            default_value=integ_test_config
        ),
        launch.actions.DeclareLaunchArgument(
            'aws_region',
            default_value=default_aws_region
        ),
        launch.actions.DeclareLaunchArgument(
            'log_group_name',
            default_value=default_log_group_name
        ),
        Node(
            package='cloudwatch_logger',
            node_executable='cloudwatch_logger',
            node_name=launch.substitutions.LaunchConfiguration('node_name'),
            parameters=parameters,
            # workaround until https://github.com/ros2/rmw_fastrtps/issues/265
            # is resolved
            arguments=['__log_disable_rosout:=true'],
            output='screen'
        ),
        launch.actions.OpaqueFunction(function=lambda context: ready_fn())
    ]), {'local_stack_process': local_stack_process})


class TestCloudwatchLogs(unittest.TestCase):

    def setUp(self):
        # wait for localstack setup
        self.proc_output.assertWaitFor(
            'Starting mock CloudWatch Logs (http port 4586)...',
            timeout=30
        )
        self.proc_output.assertWaitFor('Ready.', timeout=60)

    def test_logging_on_custom_topic(self):
        cw_client = boto3.client('logs', endpoint_url='http://localhost:4586')
        response = cw_client.describe_log_groups(
            logGroupNamePrefix='integ_test_log_group'
        )
        # ensure localstack cloudwatch logs env is clean
        self.assertEqual(
            [],
            response['logGroups'],
            'localstack environ is not clean'
        )
        rclpy.init()
        node = rclpy.create_node('integ_test_log_publisher')
        publisher = node.create_publisher(Log, '/topic1', 1)
        log_msg = Log()
        publish_count = 4
        start_time = int(round(time.time() * 1000))
        for i in range(publish_count + 1):
            log_msg.msg = 'Log message %d' % i
            log_msg.name = 'test_integ_log_meta'
            log_msg.level = 20
            log_msg.function = 'test_logs'
            log_msg.line = 1
            publisher.publish(log_msg)
            rclpy.spin_once(node, timeout_sec=2)
        rclpy.shutdown()
        response = cw_client.describe_log_groups(
            logGroupNamePrefix='integ_test_log_group'
        )
        self.assertEqual(
            'arn:aws:logs:us-west-2:1:log-group:integ_test_log_group',
            response['logGroups'][0]['arn']
        )
        time.sleep(5)
        end_time = int(round(time.time() * 1000))
        response = cw_client.get_log_events(
            logGroupName='integ_test_log_group',
            logStreamName='device_name',
            startFromHead=True,
            startTime=start_time,
            endTime=end_time
        )
        self.assertEqual(
            publish_count,
            len(response['events']),
            'mismatch in expected log events'
        )
        for event in response['events']:
            print(event)
